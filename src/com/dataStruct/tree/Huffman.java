package com.dataStruct.tree;

import java.util.PriorityQueue;
import java.util.Scanner;

public class Huffman {
	
	/**
	 * recursive function to print 
	 * huffman-code through the tree traversal.
	 * @param root 
	 * @param s Here s is a huffman-code generated.
	 * 
	 */
	public static void printCode(HuffmanNode root,String s) {
		
		//base case;if the left and right are null
		//then its a leaf node and we print the code s generated by traversing.
		//Here s is the huffman - code generated.
		if(root.leftNode == null 
				&& root.rightNode == null 
				&& Character.isLetter(root.c)) {
			System.out.println(root.c +":" + s);
			return;
		}
		
		//if we go to left then add "0" to the code
		//if we go to right then add "1" to the code
		//recursive calls for the left and right sub-tree of the generated tree.
		printCode(root.leftNode,s+"0");
		printCode(root.rightNode,s+"1");
	}
	
	public static void main(String[] args) {
		Scanner s = new Scanner(System.in);
		
		//number of characters.
		int n = 6;
		char[] charArray = {'a','b','c','d','e','f'};
		int[] charfreq = {5,9,12,13,16,45};
		
		//creating a priority queue q
		//makes a min-priority queue(min heap)
		PriorityQueue<HuffmanNode> q = new PriorityQueue<HuffmanNode>(n, new MyComparator());
		
		for(int i = 0; i < n;i++) {
			//creating a huffman node object
			//and adding it to the priority-queue
			HuffmanNode hn = new HuffmanNode();
			
			hn.c = charArray[i];
			hn.data = charfreq[i];
			
			hn.leftNode = null;
			hn.rightNode = null;
			q.add(hn);
		}
		
		//create a root node
		HuffmanNode root = null;
		
		//Here we will extract the two minimum value
		//from the heap each time util its size reduces to 1,extract util
		//all the nodes are extracted.
		while(q.size() > 1) {
			
			//first min extract
			HuffmanNode x = q.peek();
			q.poll();
			
			//second min extract
			HuffmanNode y = q.peek();
			q.poll();
			
			//new node f which is equal
			HuffmanNode f = new HuffmanNode();
			f.data = x.data + y.data;
			f.c = '-';
			f.leftNode = x;
			f.rightNode = y;
			
			root = f;
			q.add(f);
		}
		
		printCode(root, "");
	}
}
